
// // PDF Generator Component
// function InvoicePDF({ formData, vehicles }) {
//   const [pdfUrl, setPdfUrl] = useState(null);

//   useEffect(() => {
//     if (!formData || !vehicles || vehicles.length === 0) return;

//     const doc = new jsPDF();
//     const pageWidth = 210;
//     const margin = 10;
    
//     doc.addImage(headerImg, "JPEG", 0, 0, pageWidth, 53.9);
    
//     let currentY = 58;
    
//     doc.setFontSize(10);
//     doc.setFont(undefined, 'bold');
//     doc.text(`BILL NO. ${formData.invoiceNo || '1'}`, margin, currentY);
//     doc.text(`DATE: ${formData.billDate || ''}`, pageWidth - margin - 40, currentY);
    
//     currentY += 8;
    
//     doc.setFontSize(9);
//     doc.setFont(undefined, 'normal');
//     doc.text(`Party Name: ${formData.partyName || ''}`, margin, currentY);
//     currentY += 5;
//     doc.text(`Address: ${formData.partyAddress || 'KALAMBOLI'}`, margin, currentY);
//     currentY += 8;
    
//     const vehicleTableData = vehicles.map((v, idx) => [
//       idx + 1,
//       v.lrNo || '',
//       v.vehicleNo || '',
//       v.containerNo || '',
//       v.loadingDate || '',
//       v.unloadingDate || '',
//       v.from || '',
//       v.to || '',
//       v.backTo || '',
//     ]);
    
//     autoTable(doc, {
//       startY: currentY,
//       theme: 'grid',
//       styles: { 
//         fontSize: 7, 
//         cellPadding: 1.5,
//         lineColor: [0, 0, 0],
//         lineWidth: 0.1
//       },
//       headStyles: { 
//         fillColor: [240, 240, 240],
//         textColor: [0, 0, 0],
//         fontStyle: 'bold',
//         halign: 'center'
//       },
//       head: [['#', 'L.R. No.', 'Vehicle No.', 'Container No.', 'Loading Date', 'Unloading Date', 'From', 'To', 'Back To']],
//       body: vehicleTableData,
//       columnStyles: {
//         0: { cellWidth: 8, halign: 'center' },
//         1: { cellWidth: 20 },
//         2: { cellWidth: 28 },
//         3: { cellWidth: 28 },
//         4: { cellWidth: 22 },
//         5: { cellWidth: 22 },
//         6: { cellWidth: 20 },
//         7: { cellWidth: 20 },
//         8: { cellWidth: 22 },
//       },
//       margin: { left: margin, right: margin },
//     });
    
//     currentY = doc.lastAutoTable.finalY + 8;
    
//     const chargesTableData = vehicles.map((v, idx) => [
//       idx + 1,
//       parseFloat(v.freight || 0).toFixed(2),
//       parseFloat(v.unloadingCharges || 0).toFixed(2),
//       parseFloat(v.detention || 0).toFixed(2),
//       parseFloat(v.weightCharges || 0).toFixed(2),
//       parseFloat(v.others || 0).toFixed(2),
//       parseFloat(v.totalFreight || 0).toFixed(2),
//       parseFloat(v.advance || 0).toFixed(2),
//       parseFloat(v.balance || 0).toFixed(2),
//     ]);
    
//     autoTable(doc, {
//       startY: currentY,
//       theme: 'grid',
//       styles: { 
//         fontSize: 7, 
//         cellPadding: 1.5,
//         lineColor: [0, 0, 0],
//         lineWidth: 0.1
//       },
//       headStyles: { 
//         fillColor: [240, 240, 240],
//         textColor: [0, 0, 0],
//         fontStyle: 'bold',
//         halign: 'center'
//       },
//       head: [['#', 'Freight', 'Unloading', 'Detention', 'Weight', 'Others', 'Total Freight', 'Advance', 'Balance']],
//       body: chargesTableData,
//       columnStyles: {
//         0: { cellWidth: 8, halign: 'center' },
//         1: { cellWidth: 22, halign: 'right' },
//         2: { cellWidth: 22, halign: 'right' },
//         3: { cellWidth: 22, halign: 'right' },
//         4: { cellWidth: 22, halign: 'right' },
//         5: { cellWidth: 22, halign: 'right' },
//         6: { cellWidth: 25, halign: 'right' },
//         7: { cellWidth: 22, halign: 'right' },
//         8: { cellWidth: 25, halign: 'right' },
//       },
//       margin: { left: margin, right: margin },
//     });
    
//     currentY = doc.lastAutoTable.finalY + 5;
    
//     const totalFreight = vehicles.reduce((sum, v) => sum + parseFloat(v.totalFreight || 0), 0);
//     const totalAdvance = vehicles.reduce((sum, v) => sum + parseFloat(v.advance || 0), 0);
//     const totalBalance = vehicles.reduce((sum, v) => sum + parseFloat(v.balance || 0), 0);
    
//     autoTable(doc, {
//       startY: currentY,
//       theme: 'grid',
//       styles: { 
//         fontSize: 8, 
//         cellPadding: 2,
//         lineColor: [0, 0, 0],
//         lineWidth: 0.1
//       },
//       body: [
//         ['TOTAL', totalFreight.toFixed(2), totalAdvance.toFixed(2), totalBalance.toFixed(2)],
//       ],
//       columnStyles: {
//         0: { cellWidth: 130, fontStyle: 'bold', halign: 'right' },
//         1: { cellWidth: 25, halign: 'right', fontStyle: 'bold' },
//         2: { cellWidth: 22, halign: 'right', fontStyle: 'bold' },
//         3: { cellWidth: 25, halign: 'right', fontStyle: 'bold' },
//       },
//       margin: { left: margin, right: margin },
//     });
    
//     currentY = doc.lastAutoTable.finalY + 5;
    
//     doc.setFontSize(8);
//     doc.setFont(undefined, 'normal');
//     doc.text(`Received: ${formData.received || 'No'}`, margin, currentY);
//     doc.text(`Commission: ${formData.commission || '0'}`, margin + 50, currentY);
//     currentY += 5;
//     doc.text(`Ch. No.: ${formData.chNo || ''}`, margin, currentY);
//     doc.text(`Date: ${formData.date || ''}`, margin + 50, currentY);
    
//     currentY += 8;
    
//     doc.setFontSize(7);
//     doc.text('Note:', margin, currentY);
//     currentY += 4;
//     doc.text('1) 12% Interest will be charged if the payment of this bill is not made within 15 days from the date of bill.', margin + 5, currentY);
//     currentY += 4;
//     doc.text('2) You are requested to make payment to this bill by cross or order cheque in favour of "PALAK TRANSPORT CORP"', margin + 5, currentY);
    
//     const signatureY = 220;
//     doc.setFontSize(8);
//     doc.text('Prepared By.', margin + 10, signatureY);
//     doc.text('Checked By.', pageWidth/2 - 10, signatureY);
//     doc.text('Authorised Signatory', pageWidth - margin - 40, signatureY);
//     doc.text('for PALAK TRANSPORT CORP.', pageWidth - margin - 45, signatureY + 5);
    
//     doc.addImage(footerImg, "JPEG", 0, 238.4, pageWidth, 58.6);
    
//     const blob = doc.output("blob");
//     const url = URL.createObjectURL(blob);
//     setPdfUrl(url);
    
//     return () => URL.revokeObjectURL(url);
//   }, [formData, vehicles]);

//   return (
//     <div style={{ width: "100%", height: "600px", border: "1px solid #ccc", borderRadius: "8px" }}>
//       {pdfUrl ? (
//         <iframe src={pdfUrl} title="Invoice PDF" width="100%" height="100%" style={{ border: 'none' }} />
//       ) : (
//         <p style={{ padding: '20px', textAlign: 'center' }}>Loading PDF...</p>
//       )}
//     </div>
//   );
// }